// функция вершинного шейдера
@vertex
// Параметр vertexIndex типа u32, получает своё значение от встроенной функции vertex_index,
// которая возврашает номер итерации
// Возвращаемое значение типа vec4f будет присвоено встроенной функции position
// В режиме "triangle-list" каждые 3 раза, когда выполняется вершинный шейдер, будет нарисован треугольник,
// соединяющий 3 вершины, каждая из которых равна position.
fn vs(@builtin(vertex_index) vertexIndex : u32) -> @builtin(position) vec4f {
    let pos = array<vec2f, 3>(
      vec2f( 0.0,  0.5),  // сверху по центру
      vec2f(-0.5, -0.5),  // Нижний левый
      vec2f( 0.5, -0.5)   // Нижний правый
    );

    return vec4f(pos[vertexIndex], 0.0, 1.0);
}

// функция фрагментного шейдера
// Когда графический процессор растрирует треугольник(рисует его пикселями),
// он вызывает фрагментный шейдер, чтобы узнать, каким цветом сделать каждый пиксель
// Здеь просто возвращается красный цвет.
@fragment
fn fs() -> @location(0) vec4f {
    return vec4f(1.0, 0.0, 0.0, 1.0);
}
